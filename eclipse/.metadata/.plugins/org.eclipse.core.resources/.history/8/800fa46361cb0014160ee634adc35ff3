package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.Stacks.arrows;
import static net.kloudspace.trades.util.Stacks.diamondAxe;
import static net.kloudspace.trades.util.Stacks.diamondHoe;
import static net.kloudspace.trades.util.Stacks.diamondPick;
import static net.kloudspace.trades.util.Stacks.diamondSpade;
import static net.kloudspace.trades.util.Stacks.diamondSword;
import static net.kloudspace.trades.util.Stacks.ironAxe;
import static net.kloudspace.trades.util.Stacks.ironHoe;
import static net.kloudspace.trades.util.Stacks.ironPick;
import static net.kloudspace.trades.util.Stacks.ironSpade;
import static net.kloudspace.trades.util.Stacks.ironSword;
import static net.kloudspace.trades.util.Stacks.stoneAxe;
import static net.kloudspace.trades.util.Stacks.stoneHoe;
import static net.kloudspace.trades.util.Stacks.stonePick;
import static net.kloudspace.trades.util.Stacks.stoneSpade;
import static net.kloudspace.trades.util.Stacks.stoneSword;
import static net.kloudspace.trades.util.Stacks.woodAxe;
import static net.kloudspace.trades.util.Stacks.woodHoe;
import static net.kloudspace.trades.util.Stacks.woodPick;
import static net.kloudspace.trades.util.Stacks.woodSpade;
import static net.kloudspace.trades.util.Stacks.woodSword;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.kloudspace.trades.util.CostMap;
import net.kloudspace.trades.util.CostToItemStack;
import net.kloudspace.trades.util.Reference;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;
import static net.kloudspace.trades.util.Stacks.shears;
public class KloudTools implements IVillageTradeHandler{
	
	private static final List<ItemStack> tools = new ArrayList<ItemStack>();
    private final int max = 12;
    private final int min = 8;
	public KloudTools() {
		super();
		addTools();
	}
	
	@Override
    public void manipulateTradesForVillager (EntityVillager villager, MerchantRecipeList recipeList, Random random) {
		switch(villager.getProfession()) {
		case 7:
			addTools();
			ItemStack one = tools.get(random.nextInt(tools.size()-1));
			ItemStack two = tools.get(random.nextInt(tools.size() - 1));
			int stacksize = min + random.nextInt(max);
			int stacksize2 = min + random.nextInt(max);
            ItemStack ingredient = one.copy().splitStack(stacksize);
            ItemStack ingredient2 = two.copy().splitStack(stacksize2);
            int modOne = stacksize;
            int modTwo = stacksize2;
            int cost1 = CostMap.stacks.get(one);
            Reference.logger.info("Stack size =" +stacksize +"Item in Stack:" + one.getItem());
            int cost2 = CostMap.stacks.get(two);
            int modedCost1 = cost1 * modOne;
            int modedCost2 = cost2 * modTwo;
            int finalCost = cost1 + cost2;
            ItemStack result = CostToItemStack.getPrice(finalCost);
            if(ingredient.stackSize < 10 && ingredient2 != null) {
            	recipeList.addToListWithCheck(new MerchantRecipe(ingredient,ingredient2,result));
            }
            else {
            recipeList.addToListWithCheck(new MerchantRecipe(ingredient, result));
            }

	}
	public void addTools() {
		tools.add(arrows);
		tools.add(woodAxe);
		tools.add(woodHoe);
		tools.add(woodPick);
		tools.add(woodSpade);
		tools.add(woodSword);
		tools.add(stoneAxe);
		tools.add(stoneHoe);
		tools.add(stonePick);
		tools.add(stoneSpade);
		tools.add(stoneSword);
		tools.add(ironAxe);
		tools.add(ironHoe);
		tools.add(ironPick);
		tools.add(ironSpade);
		tools.add(ironSword);
		tools.add(diamondAxe);
		tools.add(diamondHoe);
		tools.add(diamondPick);
		tools.add(diamondSpade);
		tools.add(diamondSword);
		tools.add(shears);
	}
    private int getNextInt (Random random, int min, int max)
    {
        return random.nextInt(Math.max(1, (max - min) + 1)) + min;
    }
}
