package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.Stacks.apples;
import static net.kloudspace.trades.util.Stacks.arrows;
import static net.kloudspace.trades.util.Stacks.baked;
import static net.kloudspace.trades.util.Stacks.beefs;
import static net.kloudspace.trades.util.Stacks.blazePowder;
import static net.kloudspace.trades.util.Stacks.blazeRod;
import static net.kloudspace.trades.util.Stacks.bones;
import static net.kloudspace.trades.util.Stacks.bread;
import static net.kloudspace.trades.util.Stacks.cake;
import static net.kloudspace.trades.util.Stacks.carrot;
import static net.kloudspace.trades.util.Stacks.chainBoots;
import static net.kloudspace.trades.util.Stacks.chainChest;
import static net.kloudspace.trades.util.Stacks.chainHelm;
import static net.kloudspace.trades.util.Stacks.chainLegs;
import static net.kloudspace.trades.util.Stacks.chicken;
import static net.kloudspace.trades.util.Stacks.coal;
import static net.kloudspace.trades.util.Stacks.cookedBeef;
import static net.kloudspace.trades.util.Stacks.cookedChicken;
import static net.kloudspace.trades.util.Stacks.cookedFish;
import static net.kloudspace.trades.util.Stacks.cookedPorkchops;
import static net.kloudspace.trades.util.Stacks.cookies;
import static net.kloudspace.trades.util.Stacks.diamondAxe;
import static net.kloudspace.trades.util.Stacks.diamondBoots;
import static net.kloudspace.trades.util.Stacks.diamondChest;
import static net.kloudspace.trades.util.Stacks.diamondHelm;
import static net.kloudspace.trades.util.Stacks.diamondHoe;
import static net.kloudspace.trades.util.Stacks.diamondLegs;
import static net.kloudspace.trades.util.Stacks.diamondPick;
import static net.kloudspace.trades.util.Stacks.diamondSpade;
import static net.kloudspace.trades.util.Stacks.diamondSword;
import static net.kloudspace.trades.util.Stacks.diamonds;
import static net.kloudspace.trades.util.Stacks.emeralds;
import static net.kloudspace.trades.util.Stacks.ender;
import static net.kloudspace.trades.util.Stacks.fish;
import static net.kloudspace.trades.util.Stacks.glowstonedust;
import static net.kloudspace.trades.util.Stacks.gold;
import static net.kloudspace.trades.util.Stacks.gunpowder;
import static net.kloudspace.trades.util.Stacks.iron;
import static net.kloudspace.trades.util.Stacks.ironAxe;
import static net.kloudspace.trades.util.Stacks.ironBoots;
import static net.kloudspace.trades.util.Stacks.ironChest;
import static net.kloudspace.trades.util.Stacks.ironHelm;
import static net.kloudspace.trades.util.Stacks.ironHoe;
import static net.kloudspace.trades.util.Stacks.ironLegs;
import static net.kloudspace.trades.util.Stacks.ironPick;
import static net.kloudspace.trades.util.Stacks.ironSpade;
import static net.kloudspace.trades.util.Stacks.ironSword;
import static net.kloudspace.trades.util.Stacks.leatherBoots;
import static net.kloudspace.trades.util.Stacks.leatherChest;
import static net.kloudspace.trades.util.Stacks.leatherDrop;
import static net.kloudspace.trades.util.Stacks.leatherHelm;
import static net.kloudspace.trades.util.Stacks.leatherLegs;
import static net.kloudspace.trades.util.Stacks.magma;
import static net.kloudspace.trades.util.Stacks.melonslices;
import static net.kloudspace.trades.util.Stacks.mushroomStew;
import static net.kloudspace.trades.util.Stacks.neatherStar;
import static net.kloudspace.trades.util.Stacks.porkchops;
import static net.kloudspace.trades.util.Stacks.potatoes;
import static net.kloudspace.trades.util.Stacks.pumpkinpie;
import static net.kloudspace.trades.util.Stacks.redstone;
import static net.kloudspace.trades.util.Stacks.rottenFlesh;
import static net.kloudspace.trades.util.Stacks.spiderEyes;
import static net.kloudspace.trades.util.Stacks.stoneAxe;
import static net.kloudspace.trades.util.Stacks.stoneHoe;
import static net.kloudspace.trades.util.Stacks.stonePick;
import static net.kloudspace.trades.util.Stacks.stoneSpade;
import static net.kloudspace.trades.util.Stacks.stoneSword;
import static net.kloudspace.trades.util.Stacks.string;
import static net.kloudspace.trades.util.Stacks.witherBone;
import static net.kloudspace.trades.util.Stacks.witherSkull;
import static net.kloudspace.trades.util.Stacks.woodAxe;
import static net.kloudspace.trades.util.Stacks.woodHoe;
import static net.kloudspace.trades.util.Stacks.woodPick;
import static net.kloudspace.trades.util.Stacks.woodSpade;
import static net.kloudspace.trades.util.Stacks.woodSword;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.kloudspace.trades.util.CostMap;
import net.kloudspace.trades.util.CostToItemStack;
import net.kloudspace.trades.util.Reference;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;
public class KloudFarmer implements IVillageTradeHandler{
	
	private final List<ItemStack> foods = new ArrayList<ItemStack>();
	private final List<ItemStack> arm = new ArrayList<ItemStack>();

    private final int max = 20;
    private final int min = 3;
	public KloudFarmer() {
		super();
		addFood();
	}
	
	@Override
    public void manipulateTradesForVillager (EntityVillager villager, MerchantRecipeList recipeList, Random random) {
		switch(villager.getProfession()) {
		case 6:
			addFood();
			ItemStack one = foods.get(random.nextInt(foods.size()-1));
			ItemStack two = foods.get(random.nextInt(foods.size() - 1));
			int stacksize = min + random.nextInt(max);
			int stacksize2 = min + random.nextInt(max);
            ItemStack ingredient = one.copy().splitStack(stacksize);
            ItemStack ingredient2 = two.copy().splitStack(stacksize2);
            int modOne = stacksize;
            int modTwo = stacksize2;
            int cost1 = CostMap.stacks.get(one);
            Reference.logger.info("Stack size =" +stacksize +"Item in Stack:" + one.getItem());
            int cost2 = CostMap.stacks.get(two);
            int modedCost1 = cost1 * modOne;
            int modedCost2 = cost2 * modTwo;
            int finalCost = cost1 + cost2;
            ItemStack result = CostToItemStack.getPrice(finalCost);
            if(ingredient.stackSize < 10 && ingredient2 != null) {
            	recipeList.addToListWithCheck(new MerchantRecipe(ingredient,ingredient2,result));
            }
            else {
            recipeList.addToListWithCheck(new MerchantRecipe(ingredient, result));
            }
		}

	}
	
	public void addFood() {
		foods.add(bread);
		foods.add(beefs);
		foods.add(baked);
		foods.add(apples);
		foods.add(cake);
		foods.add(carrot);
		foods.add(chicken);
		foods.add(cookedBeef);
		foods.add(cookedChicken);
		foods.add(cookedFish);
		foods.add(cookedPorkchops);
		foods.add(cookies);
		foods.add(fish);
		foods.add(melonslices);
		foods.add(mushroomStew);
		foods.add(porkchops);
		foods.add(potatoes);
		foods.add(pumpkinpie);
	}
	public void addArmor() {
		arm.add(leatherBoots);
		arm.add(leatherChest);
		arm.add(leatherHelm);
		arm.add(leatherLegs);
		arm.add(ironBoots);
		arm.add(ironChest);
		arm.add(ironHelm);
		arm.add(ironLegs);
		arm.add(diamondBoots);
		arm.add(diamondChest);
		arm.add(diamondHelm);
		arm.add(diamondLegs);
		arm.add(chainBoots);
		arm.add(chainChest);
		arm.add(chainHelm);
		arm.add(chainLegs);
	}
}
