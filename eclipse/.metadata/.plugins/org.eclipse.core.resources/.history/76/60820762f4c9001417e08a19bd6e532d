package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.Stacks.arrows;
import static net.kloudspace.trades.util.Stacks.diamondAxe;
import static net.kloudspace.trades.util.Stacks.diamondHoe;
import static net.kloudspace.trades.util.Stacks.diamondPick;
import static net.kloudspace.trades.util.Stacks.diamondSpade;
import static net.kloudspace.trades.util.Stacks.diamondSword;
import static net.kloudspace.trades.util.Stacks.ironAxe;
import static net.kloudspace.trades.util.Stacks.ironHoe;
import static net.kloudspace.trades.util.Stacks.ironPick;
import static net.kloudspace.trades.util.Stacks.ironSpade;
import static net.kloudspace.trades.util.Stacks.ironSword;
import static net.kloudspace.trades.util.Stacks.stoneAxe;
import static net.kloudspace.trades.util.Stacks.stoneHoe;
import static net.kloudspace.trades.util.Stacks.stonePick;
import static net.kloudspace.trades.util.Stacks.stoneSpade;
import static net.kloudspace.trades.util.Stacks.stoneSword;
import static net.kloudspace.trades.util.Stacks.woodAxe;
import static net.kloudspace.trades.util.Stacks.woodHoe;
import static net.kloudspace.trades.util.Stacks.woodPick;
import static net.kloudspace.trades.util.Stacks.woodSpade;
import static net.kloudspace.trades.util.Stacks.woodSword;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.kloudspace.trades.util.CostMap;
import net.kloudspace.trades.util.CostToItemStack;
import net.kloudspace.trades.util.Reference;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;

public class KloudTools implements IVillageTradeHandler{
	
	private final List<ItemStack> tools = new ArrayList<ItemStack>();

	public KloudTools() {
		super();
		addTools();
	}
	
	@Override
    public void manipulateTradesForVillager (EntityVillager villager, MerchantRecipeList recipeList, Random random) {
		switch(villager.getProfession()) {
		int rand = random.nextInt(1);
		case 7:
		if(rand == 0) {
			addTools();
			ItemStack ingredient = tools.get(random.nextInt(tools.size()-1));
			int num = 1 + random.nextInt(11);
            Reference.logger.info(ingredient);
            int x = (CostMap.stacks.get(ingredient).intValue()* num);
            ItemStack result = CostToItemStack.getPrice(x);
            ItemStack is = ingredient.copy().splitStack(num);
            
            recipeList.addToListWithCheck(new MerchantRecipe(is, result));
		}
		if(rand == 1) {
			addTools();
			ItemStack is = tools.get(random.nextInt(tools.size() - 1));
            int num = 1 + random.nextInt(12);
            Reference.logger.info(is);
            int x = (CostMap.stacks.get(is).intValue()*num);
            ItemStack results = CostToItemStack.getCost(x);
            if(x>=32) {
            	ItemStack sc = CostToItemStack.getsecondCost(x);
            	recipeList.addToListWithCheck(new MerchantRecipe(results, sc, is));
            }
            else
            	recipeList.addToListWithCheck(new MerchantRecipe(is, results));
		}
		}
		
	}
	
	
	public void addTools() {
		tools.add(arrows);
		tools.add(woodAxe);
		tools.add(woodHoe);
		tools.add(woodPick);
		tools.add(woodSpade);
		tools.add(woodSword);
		tools.add(stoneAxe);
		tools.add(stoneHoe);
		tools.add(stonePick);
		tools.add(stoneSpade);
		tools.add(stoneSword);
		tools.add(ironAxe);
		tools.add(ironHoe);
		tools.add(ironPick);
		tools.add(ironSpade);
		tools.add(ironSword);
		tools.add(diamondAxe);
		tools.add(diamondHoe);
		tools.add(diamondPick);
		tools.add(diamondSpade);
		tools.add(diamondSword);
	}

    private int getNextInt (Random random, int min, int max)
    {
        return random.nextInt(Math.max(1, (max - min) + 1)) + min;
    }
}
