package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.CostMap.stacks;
import static net.kloudspace.trades.util.Stacks.blazePowder;
import static net.kloudspace.trades.util.Stacks.blazeRod;
import static net.kloudspace.trades.util.Stacks.bones;
import static net.kloudspace.trades.util.Stacks.ender;
import static net.kloudspace.trades.util.Stacks.gunpowder;
import static net.kloudspace.trades.util.Stacks.leatherDrop;
import static net.kloudspace.trades.util.Stacks.magma;
import static net.kloudspace.trades.util.Stacks.neatherStar;
import static net.kloudspace.trades.util.Stacks.rottenFlesh;
import static net.kloudspace.trades.util.Stacks.spiderEyes;
import static net.kloudspace.trades.util.Stacks.string;
import static net.kloudspace.trades.util.Stacks.witherBone;
import static net.kloudspace.trades.util.Stacks.witherSkull;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.kloudspace.trades.util.CostMap;
import net.kloudspace.trades.util.CostToItemStack;
import net.kloudspace.trades.util.Reference;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;

public class KloudDrops implements IVillageTradeHandler{
	private final List<ItemStack> drops = new ArrayList<ItemStack>();

	
	
    private final int max = 16;
    private final int min = 1;
    public KloudDrops() {
    	super();
    	addDrops();
    }

	
	@Override
	public void manipulateTradesForVillager(EntityVillager villager,
			MerchantRecipeList recipeList, Random random) {
		switch(villager.getProfession()){
			case 8:
				addDrops();
//				ItemStack ingredient;
				ItemStack ingredient2 = null;
				ItemStack two = null;
			    int cost;
			    int cost2 = 0;
				int num = 0;
				ItemStack one = drops.get(random.nextInt(drops.size() - 1));
				
				Reference.logger.info("The errored Ingredient" +one);
				num = min + random.nextInt(max);
				if(one.getItem() == Items.ender_pearl || one.getItem() == Items.blaze_powder ||
						one.getItem() == Items.blaze_rod ||one.getItem() == Items.bone ||
								one.getItem() == Items.skull||one.getItem() == Items.magma_cream) {
					num = min + random.nextInt(6);
				}
				ItemStack ingredient = one.copy().splitStack(num);
				if(ingredient.getItem() != Items.ender_pearl || ingredient.getItem() != Items.blaze_powder || ingredient.getItem() != Items.blaze_rod ||ingredient.getItem() != Items.bone || ingredient.getItem() != Items.skull||ingredient.getItem() != Items.magma_cream && ingredient.stackSize <= 13) {
					two = drops.get(random.nextInt(drops.size()));
					ingredient2 = two.copy().splitStack(num);
				}
				int cost1 = ((CostMap.stacks.get(one).intValue()));
				if(two != null) {
					cost2 = ((CostMap.stacks.get(two).intValue()));
				}
				
				cost = (cost1*num) + (cost2*num);
				ItemStack result = CostToItemStack.getPrice(cost);
				if(ingredient != null && result != null) {
				recipeList.addToListWithCheck(new MerchantRecipe(ingredient, result));
				}
				if(ingredient2 != null) {
					recipeList.addToListWithCheck(new MerchantRecipe(ingredient, ingredient2, result));
				}
		}
	}
	
	public void addDrops() {
		drops.add(rottenFlesh);
		drops.add(string);
		drops.add(spiderEyes);
		drops.add(ender);
		drops.add(gunpowder);
		drops.add(bones);
		drops.add(leatherDrop);
		drops.add(blazeRod);
		drops.add(blazePowder);
		drops.add(magma);
		drops.add(witherBone);
		drops.add(witherSkull);
		drops.add(neatherStar);
	}
	

}
