package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.Stacks.apples;

import java.util.Random;

import net.kloudspace.trades.util.CostToItemStack;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentData;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.MathHelper;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;

public class TradeHandler implements IVillageTradeHandler {

	@Override
	public void manipulateTradesForVillager(EntityVillager villager, MerchantRecipeList recipeList, Random random) {
		int flint = 4 + random.nextInt(6);
		int glasspane = 3 + random.nextInt(7);
		int coal = 16 + random.nextInt(8);
		int iron = 7 + random.nextInt(3);
		int diamond = 3 + random.nextInt(1);
		CostToItemStack CTIS = new CostToItemStack();
		
		switch(villager.getProfession()) {
		case 6: // FARMER
			recipeList.add(new MerchantRecipe(new ItemStack(Items.wheat, 18 + random.nextInt(4)), CTIS.getPrice(20)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.potato, 15 + random.nextInt(4)), CTIS.getPrice(16)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.carrot, 15 + random.nextInt(4)), CTIS.getPrice(16)));
			recipeList.add(new MerchantRecipe(new ItemStack(Blocks.pumpkin, 8 + random.nextInt(5)), CTIS.getPrice(32)));
			recipeList.add(new MerchantRecipe(new ItemStack(Blocks.melon_block, 7 + random.nextInt(5)), CTIS.getPrice(64)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(128), CTIS.getsecondCost(128), new ItemStack(Items.bread, 2 + random.nextInt(2))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(100), CTIS.getsecondCost(100), new ItemStack(Items.pumpkin_pie, 1 + random.nextInt(2))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(100), CTIS.getsecondCost(100), apples));
			recipeList.add(new MerchantRecipe(CTIS.getCost(78), CTIS.getsecondCost(78), new ItemStack(Items.cookie, 1 + random.nextInt(5))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(220), CTIS.getsecondCost(220), new ItemStack(Items.cake, 1)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.string, 15 + random.nextInt(5)),CTIS.getPrice(15)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.coal,16 + random.nextInt(8)),CTIS.getPrice(30)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.fish,6), CTIS.getCost(160), new ItemStack(Items.cooked_fished,6)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(300), CTIS.getsecondCost(300),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.fishing_rod,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(new ItemStack(Item.getItemFromBlock(Blocks.wool),16 + random.nextInt(6), 0),CTIS.getPrice(80)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(200), CTIS.getsecondCost(200), new ItemStack(Items.shears)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(80), CTIS.getsecondCost(80), new ItemStack(Item.getItemFromBlock(Blocks.wool),1 + random.nextInt(17),0 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(25), new ItemStack(Items.arrow,8 + random.nextInt(4))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(500), CTIS.getsecondCost(500), new ItemStack(Items.bow,1)));
			recipeList.add(new MerchantRecipe(new ItemStack(Item.getItemFromBlock(Blocks.gravel), flint), CTIS.getCost(160), new ItemStack(Items.flint, flint)));
			
			break;
		case 7: // LIBRARIAN
			int k;
			Enchantment ench = Enchantment.enchantmentsBookList[random.nextInt(Enchantment.enchantmentsBookList.length)];
			int i1 = MathHelper.getRandomIntegerInRange(random, ench.getMinLevel(), ench.getMaxLevel());
			ItemStack itemstack = Items.enchanted_book.getEnchantedItemStack(new EnchantmentData(ench, i1));
			k = 2 + random.nextInt(5 + i1 * 10) + 3 * i1;
			
			recipeList.add(new MerchantRecipe(new ItemStack(Items.paper, 24 + random.nextInt(12)), CTIS.getPrice(100)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.book,8 + random.nextInt(2)), CTIS.getPrice(230)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.written_book), CTIS.getPrice(150)));
//			recipeList.add(new MerchantRecipe(new ItemStack(ItemReg.itemCoin,1 + random.nextInt(63),0), Items.enchanted_book.getEnchantedItemStack(new EnchantmentData(Enchantment.enchantmentsList[x], 1 + random.nextInt(18)))));

			recipeList.add(new MerchantRecipe(new ItemStack(Items.book), CTIS.getCost(600), itemstack));

			recipeList.add(new MerchantRecipe(CTIS.getCost(300), CTIS.getsecondCost(300), new ItemStack(Items.compass,1)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(145), CTIS.getsecondCost(145),new ItemStack(Blocks.bookshelf,1)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(175), CTIS.getsecondCost(175), new ItemStack(Items.clock,1)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(80), CTIS.getsecondCost(80), new ItemStack(Blocks.glass_pane,glasspane, random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(700), CTIS.getsecondCost(700), new ItemStack(Items.name_tag,1,0)));
			break;
		case 8: // PRIEST
			recipeList.add(new MerchantRecipe(new ItemStack(Items.rotten_flesh, 36 + random.nextInt(4)), CTIS.getPrice(200)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.gold_ingot, 8 + random.nextInt(2)),CTIS.getPrice(120)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(14), new ItemStack(Items.redstone, 1 + random.nextInt(3))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(20), new ItemStack(Items.dye,1 + random.nextInt(1),4)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(400), CTIS.getsecondCost(400), new ItemStack(Items.ender_eye,1)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(70), CTIS.getsecondCost(70), new ItemStack(Items.glowstone_dust,1 + random.nextInt(2))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(150), CTIS.getsecondCost(150), new ItemStack(Items.experience_bottle,1)));
			break;
		case 9: // BLACKSMITH
			recipeList.add(new MerchantRecipe(new ItemStack(Items.coal,coal), CTIS.getPrice(30)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.iron_ingot,iron), CTIS.getPrice(500)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.diamond, diamond), CTIS.getPrice(5000)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(2000), CTIS.getsecondCost(2000), new ItemStack(Items.iron_helmet)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(3500), CTIS.getsecondCost(3500), new ItemStack(Items.iron_chestplate)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(10000), CTIS.getsecondCost(10000),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.diamond_chestplate,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1200), CTIS.getsecondCost(1200), new ItemStack(Items.chainmail_boots)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1800), CTIS.getsecondCost(1800), new ItemStack(Items.chainmail_chestplate)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1000), CTIS.getsecondCost(1000), new ItemStack(Items.chainmail_helmet)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1300), CTIS.getsecondCost(1300), new ItemStack(Items.chainmail_leggings)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(700), CTIS.getsecondCost(700), new ItemStack(Items.iron_axe)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(2000), CTIS.getsecondCost(2000),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.iron_sword,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(5000), CTIS.getsecondCost(5000),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.diamond_sword,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(4500), CTIS.getsecondCost(4500),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.diamond_axe,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1000), CTIS.getsecondCost(1000),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.iron_shovel,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(1750), CTIS.getsecondCost(1750),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.iron_pickaxe,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(4500), CTIS.getsecondCost(4500),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.diamond_pickaxe,1,0), 5 + random.nextInt(15))));
			break;
		case 10: // BUTCHER
			recipeList.add(new MerchantRecipe(new ItemStack(Items.porkchop,14 + random.nextInt(4)), CTIS.getPrice(60)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.chicken,14 + random.nextInt(4)), CTIS.getPrice(55)));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.coal,16 + random.nextInt(8)), CTIS.getPrice(95)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(120), CTIS.getsecondCost(120), new ItemStack(Items.cooked_porkchop, 4 + random.nextInt(4))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(120),CTIS.getsecondCost(120), new ItemStack(Items.cooked_chicken, 6 + random.nextInt(2))));
			recipeList.add(new MerchantRecipe(new ItemStack(Items.leather,9 + random.nextInt(3)), CTIS.getPrice(300)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(400), CTIS.getsecondCost(400), new ItemStack(Items.leather_leggings,1)));
			recipeList.add(new MerchantRecipe(CTIS.getCost(900), CTIS.getsecondCost(900),EnchantmentHelper.addRandomEnchantment(random, new ItemStack(Items.leather_chestplate,1,0), 5 + random.nextInt(15))));
			recipeList.add(new MerchantRecipe(CTIS.getCost(4000), CTIS.getsecondCost(4000), new ItemStack(Items.saddle,1)));
			break;
		default:
			break;

		}	
	}
}
