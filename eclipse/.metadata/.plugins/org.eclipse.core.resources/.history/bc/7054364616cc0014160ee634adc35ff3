package net.kloudspace.trades.event.handlers;

import static net.kloudspace.trades.util.Stacks.arrows;
import static net.kloudspace.trades.util.Stacks.diamondAxe;
import static net.kloudspace.trades.util.Stacks.diamondHoe;
import static net.kloudspace.trades.util.Stacks.diamondPick;
import static net.kloudspace.trades.util.Stacks.diamondSpade;
import static net.kloudspace.trades.util.Stacks.diamondSword;
import static net.kloudspace.trades.util.Stacks.ironAxe;
import static net.kloudspace.trades.util.Stacks.ironHoe;
import static net.kloudspace.trades.util.Stacks.ironPick;
import static net.kloudspace.trades.util.Stacks.ironSpade;
import static net.kloudspace.trades.util.Stacks.ironSword;
import static net.kloudspace.trades.util.Stacks.stoneAxe;
import static net.kloudspace.trades.util.Stacks.stoneHoe;
import static net.kloudspace.trades.util.Stacks.stonePick;
import static net.kloudspace.trades.util.Stacks.stoneSpade;
import static net.kloudspace.trades.util.Stacks.stoneSword;
import static net.kloudspace.trades.util.Stacks.woodAxe;
import static net.kloudspace.trades.util.Stacks.woodHoe;
import static net.kloudspace.trades.util.Stacks.woodPick;
import static net.kloudspace.trades.util.Stacks.woodSpade;
import static net.kloudspace.trades.util.Stacks.woodSword;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.kloudspace.trades.util.CostMap;
import net.kloudspace.trades.util.CostToItemStack;
import net.kloudspace.trades.util.Reference;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageTradeHandler;
import static net.kloudspace.trades.util.Stacks.shears;
public class KloudTools implements IVillageTradeHandler{
	
	private static final List<ItemStack> tools = new ArrayList<ItemStack>();
    private final int max = 1;
    private final int min = 1;
    private ItemStack ingredient;
	private ItemStack ingredient2;
	private ItemStack modified;
	private ItemStack modified2;
	private ItemStack result;
	private ItemStack sell1;
	private ItemStack sell2;
	private int cost;
	private int cost2;
	private int total;
	private int stacksize;
	private int randomNumber;
	static Random rand = new Random();
	public KloudTools() {
		super();
		addTools();
	}
	public void buySell() {
		randomNumber = rand.nextInt(1);
	}
	
	@Override
    public void manipulateTradesForVillager (EntityVillager villager, MerchantRecipeList recipeList, Random random) {
		addTools();
		switch(villager.getProfession()) {
		case 9:
			getStack();
			getStack2();
			getCost(ingredient);
			getCost2(ingredient2);
			stackCost(ingredient, ingredient2,cost,cost2);
			getResultStack(total);
			Reference.logger.info("Stack size = " + modified.stackSize +"for Item: " + modified);
			Reference.logger.info("Coin Stack for "+total +" = " +result);
			if(ingredient.stackSize < 10 && ingredient2 != null) {
				recipeList.addToListWithCheck(new MerchantRecipe(modified,modified2,result));
			}
			else {
				recipeList.addToListWithCheck(new MerchantRecipe(modified, result));
			}
		case 14:
			getStack();
			getCost(ingredient);
			stackCost(ingredient, cost);
			getResultStackSell(total);
			if(sell2 != null) {
				recipeList.addToListWithCheck(new MerchantRecipe(sell1,sell2,modified));
			}
			else {
				recipeList.addToListWithCheck(new MerchantRecipe(sell1,modified));
			}
		}
	}
	public void addTools() {
		tools.add(arrows);
		tools.add(woodAxe);
		tools.add(woodHoe);
		tools.add(woodPick);
		tools.add(woodSpade);
		tools.add(woodSword);
		tools.add(stoneAxe);
		tools.add(stoneHoe);
		tools.add(stonePick);
		tools.add(stoneSpade);
		tools.add(stoneSword);
		tools.add(ironAxe);
		tools.add(ironHoe);
		tools.add(ironPick);
		tools.add(ironSpade);
		tools.add(ironSword);
		tools.add(diamondAxe);
		tools.add(diamondHoe);
		tools.add(diamondPick);
		tools.add(diamondSpade);
		tools.add(diamondSword);
		tools.add(shears);
	}
	public void getStack() {
		ingredient = tools.get(rand.nextInt(tools.size() - 1));
		modified = ingredient;
		
	}
	public void getStack2() {
		ingredient2 = tools.get(rand.nextInt(tools.size() - 1));
		modified2 = ingredient2;
	}
	public void getCost(ItemStack st1) {
		int c = CostMap.stacks.get(st1);
		cost = c;
	}
	public void getCost2(ItemStack st2) {
		int c= CostMap.stacks.get(st2);
		cost2 = c;
	}
	public void stackCost(ItemStack st1, ItemStack st2, int c, int c1) {
		int ss1 = st1.stackSize;
		int ss2 = st2.stackSize;
		int stack1 = ss1 * c;
		int stack2 = ss2 * c1;
		int total1 = stack1 + stack2;
		total = total1;
	}
	public void stackCost(ItemStack st1, int c) {
		int ss1 = st1.stackSize;
		int stack1 = ss1 * c;
		total = stack1;
	}
	public void getResultStack(int tt) {
		result = CostToItemStack.getPrice(tt);
	}
	public void getResultStackSell(int value) {
		sell1 = CostToItemStack.getCost(value);
		if(value > 64){sell2 = CostToItemStack.getsecondCost(value);}
		else {sell2 = null;}
	}
}
